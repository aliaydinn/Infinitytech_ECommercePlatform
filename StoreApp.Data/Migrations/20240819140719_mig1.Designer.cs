// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreApp.Data.Context;

#nullable disable

namespace StoreApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240819140719_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "627517e6-b976-4003-ac0c-a5376de1de11",
                            ConcurrencyStamp = "376542a9-e508-4b4a-b525-a13319060b27",
                            Name = "Admin",
                            NormalizedName = "ADMİN"
                        },
                        new
                        {
                            Id = "a87c4b4f-a0e2-4528-9edc-6241965c1448",
                            ConcurrencyStamp = "2e2f2625-e955-41b9-b76f-819a44e1db99",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "fd23d16c-f30f-4274-b198-8850d8c6c240",
                            ConcurrencyStamp = "f3f34f78-a48a-4383-b259-8faf03809ad5",
                            Name = "Editör",
                            NormalizedName = "EDİTÖR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StoreApp.Entity.Entities.CartLine", b =>
                {
                    b.Property<Guid>("CartLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartLineId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartLine");
                });

            modelBuilder.Entity("StoreApp.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47b874c1-ea98-401a-9f76-8eb4aa1edee3"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(4057),
                            IsActive = true,
                            Name = "Projectors"
                        },
                        new
                        {
                            Id = new Guid("1794b941-6e99-45af-b47c-88f4b5fdd083"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(4114),
                            IsActive = true,
                            Name = "VR"
                        },
                        new
                        {
                            Id = new Guid("530bcd17-9c66-4482-abef-b6991086e322"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(4130),
                            IsActive = true,
                            Name = "Camera"
                        },
                        new
                        {
                            Id = new Guid("2a706fac-5ce1-4139-a6b0-70a0ae7e0f85"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(4150),
                            IsActive = true,
                            Name = "Earphone"
                        },
                        new
                        {
                            Id = new Guid("99bdc477-d253-4d9a-b4f0-0ee1170b5aae"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(4158),
                            IsActive = true,
                            Name = "Computer Hardware"
                        });
                });

            modelBuilder.Entity("StoreApp.Entity.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GiftWrap")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Shipment")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreApp.Entity.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("BriefInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Showcase")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35ca29f1-57d0-434e-af66-9112bfe06f50"),
                            Availability = true,
                            BriefInformation = "Lorem ipsum dolor sit amet consectetur, adipiscing elit neque.\r\nPraesent montes ac nam duis, orci tortor nullam.\r\nViverra sagittis felis iaculis fermentum libero, est duis montes.",
                            CategoryId = new Guid("99bdc477-d253-4d9a-b4f0-0ee1170b5aae"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(5763),
                            ImageUrl = " /images/1.png",
                            Information = "ASD",
                            IsActive = true,
                            Name = "Computer",
                            Price = 12000m,
                            Showcase = true
                        },
                        new
                        {
                            Id = new Guid("68c77644-a21c-489c-8860-32566541ec8a"),
                            Availability = true,
                            BriefInformation = "Lorem ipsum dolor sit amet consectetur, adipiscing elit neque.\r\nPraesent montes ac nam duis, orci tortor nullam.\r\nViverra sagittis felis iaculis fermentum libero, est duis montes.",
                            CategoryId = new Guid("99bdc477-d253-4d9a-b4f0-0ee1170b5aae"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(5792),
                            ImageUrl = "/images/2.png",
                            Information = "ASD",
                            IsActive = true,
                            Name = "Mouse",
                            Price = 5000m,
                            Showcase = true
                        },
                        new
                        {
                            Id = new Guid("e48d66dc-241e-4ad2-97e9-c55d0560bd24"),
                            Availability = true,
                            BriefInformation = "Lorem ipsum dolor sit amet consectetur, adipiscing elit neque.\r\nPraesent montes ac nam duis, orci tortor nullam.\r\nViverra sagittis felis iaculis fermentum libero, est duis montes.",
                            CategoryId = new Guid("99bdc477-d253-4d9a-b4f0-0ee1170b5aae"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(5800),
                            ImageUrl = "/images/3.png",
                            Information = "ASD",
                            IsActive = true,
                            Name = "Keyboard",
                            Price = 1500m,
                            Showcase = true
                        },
                        new
                        {
                            Id = new Guid("43710c05-a70a-4df6-9644-ef1985899af8"),
                            Availability = true,
                            BriefInformation = "Lorem ipsum dolor sit amet consectetur, adipiscing elit neque.\r\nPraesent montes ac nam duis, orci tortor nullam.\r\nViverra sagittis felis iaculis fermentum libero, est duis montes.",
                            CategoryId = new Guid("2a706fac-5ce1-4139-a6b0-70a0ae7e0f85"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(5807),
                            ImageUrl = "/images/4.png",
                            Information = "ASD",
                            IsActive = true,
                            Name = "Monıtor",
                            Price = 6000m,
                            Showcase = true
                        },
                        new
                        {
                            Id = new Guid("7212283e-8cc4-4c75-94ed-a9b9f73e1565"),
                            Availability = true,
                            BriefInformation = "Lorem ipsum dolor sit amet consectetur, adipiscing elit neque.\r\nPraesent montes ac nam duis, orci tortor nullam.\r\nViverra sagittis felis iaculis fermentum libero, est duis montes.",
                            CategoryId = new Guid("530bcd17-9c66-4482-abef-b6991086e322"),
                            CreatedBy = "Undifined",
                            CreatedDate = new DateTime(2024, 8, 19, 17, 7, 18, 849, DateTimeKind.Local).AddTicks(5816),
                            ImageUrl = "/images/5.png",
                            Information = "ASD",
                            IsActive = true,
                            Name = "Deck",
                            Price = 3000m,
                            Showcase = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreApp.Entity.Entities.CartLine", b =>
                {
                    b.HasOne("StoreApp.Entity.Entities.Order", null)
                        .WithMany("CartLines")
                        .HasForeignKey("OrderId");

                    b.HasOne("StoreApp.Entity.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreApp.Entity.Entities.Product", b =>
                {
                    b.HasOne("StoreApp.Entity.Entities.Category", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("StoreApp.Entity.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StoreApp.Entity.Entities.Order", b =>
                {
                    b.Navigation("CartLines");
                });
#pragma warning restore 612, 618
        }
    }
}
